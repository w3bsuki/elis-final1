# WEBSITE OPTIMIZATION AND ERROR RESOLUTION PLAN

## CURRENT ISSUES IDENTIFIED

1. **Mixing App Router and Pages Router**
   - The website uses both `/app` directory (App Router) and `/pages` directory (Pages Router) 
   - This leads to routing conflicts and component rendering issues
   - The deleted index.tsx file from /pages was causing conflicts with app/page.tsx

2. **Missing Homepage Sections**
   - Many section components exist but aren't being displayed on the homepage
   - Current homepage only shows Hero and BookTimeline components
   - Missing sections include: Footer, Bestsellers, Testimonials, Services, etc.

3. **Component Reference Errors**
   - The error with AboutUs component indicates potential path reference issues
   - Components in root `/components` directory causing conflicts with `/src/components`

4. **Cache and Build Issues**
   - Webpack cache errors: "Caching failed for pack" 
   - Multiple port usage suggests zombie processes of Next.js dev server

## ACTION PLAN

### 1. Consolidate Routing Strategy
- **PRIORITY: HIGH**
- Choose ONE routing strategy (App Router recommended as it's newer)
- If using App Router:
  - Move all content from `/pages` to `/app` with proper structure
  - Create appropriate layout files for shared UI elements
- If using Pages Router:
  - Move content from `/app` to `/pages`
  - Delete `/app` directory entirely

### 2. Fix Component Structure
- **PRIORITY: HIGH**
- Move all components from root `/components` to `/src/components`
- Delete the root level components directory
- Ensure correct import paths across the application
- Fix AboutUs component path reference

### 3. Restore Homepage Layout
- **PRIORITY: HIGH**
- Create a proper homepage layout in the selected router
- Include all necessary sections from `/src/components/sections`:
  - Hero
  - BookTimeline
  - Bestsellers
  - Testimonials
  - Services (if needed)
  - Footer
- Ensure proper styling and spacing between sections

### 4. Clean Up Project Environment
- **PRIORITY: MEDIUM**
- Clear cache completely:
  - Delete `.next` folder manually
  - Run `npx rimraf .next node_modules/.cache`
- Kill all running Next.js processes
- Check for and remove any unused components
- Verify all dependencies in package.json

### 5. Improve Language Context Implementation
- **PRIORITY: MEDIUM**
- Fix the LanguageProvider component to ensure it works properly
- Implement it correctly in the layout file without "use client" conflicts
- Test with different languages to ensure translations work

### 6. Fix Image Configuration
- **PRIORITY: LOW**
- Address the warning: "images.domains configuration is deprecated"
- Update to use images.remotePatterns in next.config.js

## IMPLEMENTATION STEPS

### Step 1: Consolidate to App Router
1. Update `next.config.js` to support App Router
2. Create proper `app/layout.tsx` with metadata and client wrapper
3. Move all page content to appropriate app directory routes
4. Delete or deprecate pages directory after migration

### Step 2: Fix Component References
1. Delete components/AboutUs.tsx (root level)
2. Ensure all imports use @/ path aliases consistently
3. Validate all component imports in the app/page.tsx file

### Step 3: Rebuild Homepage
1. Update app/page.tsx to include all necessary sections
2. Add proper spacing and styling between sections
3. Ensure responsive design works across all sections

### Step 4: Clean Build Environment
1. Stop all running Next.js instances
2. Delete .next directory
3. Run fresh installation: `pnpm install`
4. Start with clean build: `pnpm dev`

## OPTIMIZATION RECOMMENDATIONS

1. **Code Splitting**
   - Use dynamic imports for larger components to improve loading time
   - Example: `const DynamicComponent = dynamic(() => import('./Component'))`

2. **Image Optimization**
   - Ensure all images use Next.js Image component
   - Properly size and optimize images
   - Consider using a CDN for image hosting

3. **State Management**
   - Review current state management approach
   - Consider using React Context more efficiently for global state

4. **Performance Monitoring**
   - Add Lighthouse CI to track performance metrics
   - Implement error tracking using Sentry or similar service

## CONCLUSION

The main issues stem from mixing routing strategies and component reference problems. The plan focuses on consolidating to a single routing approach, fixing component references, and rebuilding the homepage with all necessary sections. Additional cleanup and optimization steps will improve overall performance and maintainability. 